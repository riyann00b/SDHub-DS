i{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Python Basics and Markdown Fundamentals\n",
    "\n",
    "Today's class covered the fundamentals of working in Jupyter Notebook, basic Markdown for documentation, and the core concepts of Python variables and data types."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## ‚úçÔ∏è Markdown Cheat Sheet\n",
    "\n",
    "Markdown is used for formatting text in cells. Here's a quick reference:\n",
    "\n",
    "| Feature       | Syntax                      | Example                                      |\n",
    "| :------------ | :-------------------------- | :------------------------------------------- |\n",
    "| **Headings**  | `#` to `######`             | `# H1`, `## H2`, `### H3`                    |\n",
    "| **Bold**      | `**Bold**`                  | **Bold**                                     |\n",
    "| **Italic**    | `*Italic*`                  | *Italic*                                     |\n",
    "| **Lists**     | `- Item` or `1. Item`       | `- Item 1`<br>`1. Item 2`                 |\n",
    "| **Quotes**    | `> Quote`                   | > This is a quote.                           |\n",
    "| **Inline Code**| `` `code` ``                 | `print(\"Hello\")`                           |\n",
    "| **Links**     | `[Text](URL)`               | [Python Docs](https://docs.python.org/3/)    |\n",
    "| **Images**    | `![Alt Text](URL)`          | ![Python Logo](https://www.python.org/static/community_logos/python-logo-master-v3-TM.png) |"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## üÜî Variables and Identifiers\n",
    "\n",
    "Variables are names given to data values. These names are called **identifiers** and must follow specific rules.\n",
    "\n",
    "- **Rules for Naming:**\n",
    "  1. Must start with a letter (`a-z`, `A-Z`) or an underscore (`_`).\n",
    "  2. Can contain letters, numbers (`0-9`), and underscores.\n",
    "  3. **Cannot** contain spaces or special characters (`@`, `!`, `&`, etc.).\n",
    "  4. Are **case-sensitive** (`age` is different from `Age`)."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### ‚úÖ **Valid** Identifier Examples:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "All these variables were assigned successfully!\n"
     ]
    }
   ],
   "source": [
    "test = 100\n",
    "test_10 = 100\n",
    "_test = 100\n",
    "name1 = 10\n",
    "print(\"All these variables were assigned successfully!\")"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### ‚ùå **Invalid** Identifier Examples:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {},
   "outputs": [
    {
     "ename": "SyntaxError",
     "evalue": "invalid decimal literal (319099665.py, line 1)",
     "output_type": "error",
     "traceback": [
      "  \u001b[36mCell\u001b[39m\u001b[36m \u001b[39m\u001b[32mIn[4]\u001b[39m\u001b[32m, line 1\u001b[39m\n\u001b[31m    \u001b[39m\u001b[31m20test = 100  # Starts with a number\u001b[39m\n     ^\n\u001b[31mSyntaxError\u001b[39m\u001b[31m:\u001b[39m invalid decimal literal\n"
     ]
    }
   ],
   "source": [
    "20test = 100  # Starts with a number\n",
    "test@2 = 100  # Contains a special character '@'\n",
    "name 1 = 10   # Contains a space"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## üî¢ Basic Data Types\n",
    "\n",
    "Python automatically assigns a data type to a variable based on its value.\n",
    "\n",
    "- `int`: Whole numbers (e.g., `10`, `-50`).\n",
    "- `float`: Numbers with decimals (e.g., `3.14`, `-0.5`).\n",
    "- `str`: Text, enclosed in single (`'`) or double (`\"`) quotes.\n",
    "- `bool`: `True` or `False`."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### Using the `type()` function to check data types:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "<class 'int'>\n",
      "<class 'float'>\n",
      "<class 'str'>\n",
      "<class 'bool'>\n"
     ]
    }
   ],
   "source": [
    "print(type(10))        # An integer\n",
    "print(type(99.9))      # A float\n",
    "print(type(\"Hello\"))   # A string\n",
    "print(type(True))      # A boolean"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## üöÄ My Programs"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### üìù Problem 1: Personal Details\n",
    "\n",
    "*Task: Define variables for name, gender, age, course, and duration, then display them.*"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "My Name:  riyan \n",
      "My Age:  22 \n",
      "My Gender:  Male \n",
      "My Course:  Data Science \n",
      "My Duration:  4.5 months\n"
     ]
    }
   ],
   "source": [
    "# Assigning personal details to variables\n",
    "name = 'riyan'\n",
    "gender = 'Male'\n",
    "age = 22\n",
    "course = 'Data Science'\n",
    "duration = '4.5 months'\n",
    "\n",
    "# Printing the details with descriptions and newlines for readability\n",
    "print(\"My Name: \", name, \n",
    "      \"\\nMy Age: \" , age, \n",
    "      \"\\nMy Gender: \", gender, \n",
    "      \"\\nMy Course: \", course, \n",
    "      \"\\nMy Duration: \", duration)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### üìù Problem 2 (Homework): Student Details & Data Types\n",
    "\n",
    "*Task: Define variables for a student's roll number, college, and year. Then, display these details and the data type of each variable.*"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "--- Student Information ---\n",
      "My Roll No:  160924748036 \n",
      "My Name:  riyan \n",
      "My College:  LORDs \n",
      "My Course:  Data Science \n",
      "My Year:  2025\n",
      "\n",
      "--- Data Type Check ---\n",
      "Data type of 'roll_no': <class 'int'>\n",
      "Data type of 'name': <class 'str'>\n",
      "Data type of 'college': <class 'str'>\n",
      "Data type of 'course': <class 'str'>\n",
      "Data type of 'year': <class 'int'>\n"
     ]
    }
   ],
   "source": [
    "# Assigning student details to variables\n",
    "roll_no = 160924748036\n",
    "college = \"LORDs\"\n",
    "year = 2025\n",
    "\n",
    "# Displaying the student details\n",
    "print(\"--- Student Information ---\")\n",
    "print(\"My Roll No: \", roll_no, \n",
    "      \"\\nMy Name: \", name, # Reusing the 'name' variable from the previous cell\n",
    "      \"\\nMy College: \", college, \n",
    "      \"\\nMy Course: \", course, # Reusing the 'course' variable\n",
    "      \"\\nMy Year: \", year)\n",
    "\n",
    "# homework\n",
    "print(\"\\n--- Data Type Check ---\")\n",
    "print(\"Data type of 'roll_no':\", type(roll_no))\n",
    "print(\"Data type of 'name':\", type(name))\n",
    "print(\"Data type of 'college':\", type(college))\n",
    "print(\"Data type of 'course':\", type(course))\n",
    "print(\"Data type of 'year':\", type(year))"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.13.5"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 4
}
